/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Klavis from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace User {
    export interface Options {
        environment?: core.Supplier<environments.KlavisEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class User {
    protected readonly _options: User.Options;

    constructor(_options: User.Options = {}) {
        this._options = _options;
    }

    /**
     * Get all available integrations (MCP server names) by user ID.
     * Returns a list of integration names as McpServerName types.
     *
     * @param {string} userId - The external user ID
     * @param {User.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.user.getUserIntegrations("user_id")
     */
    public getUserIntegrations(
        userId: string,
        requestOptions?: User.RequestOptions,
    ): core.HttpResponsePromise<Klavis.GetUserIntegrationsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getUserIntegrations(userId, requestOptions));
    }

    private async __getUserIntegrations(
        userId: string,
        requestOptions?: User.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.GetUserIntegrationsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                `user/${encodeURIComponent(userId)}/integrations`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.GetUserIntegrationsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling GET /user/{user_id}/integrations.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get user information by user_id.
     *
     * @param {string} userId - The identifier for the user to fetch.
     * @param {User.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.user.getUserByUserId("user_id")
     */
    public getUserByUserId(
        userId: string,
        requestOptions?: User.RequestOptions,
    ): core.HttpResponsePromise<Klavis.GetUserResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getUserByUserId(userId, requestOptions));
    }

    private async __getUserByUserId(
        userId: string,
        requestOptions?: User.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.GetUserResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                `user/${encodeURIComponent(userId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.GetUserResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling GET /user/{user_id}.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a user and all associated data by user_id.
     * Users cannot delete their own accounts.
     * This operation will permanently remove all user data.
     *
     * @param {string} userId - The identifier for the user to delete.
     * @param {User.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.user.deleteUserByUserId("user_id")
     */
    public deleteUserByUserId(
        userId: string,
        requestOptions?: User.RequestOptions,
    ): core.HttpResponsePromise<Klavis.DeleteUserResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteUserByUserId(userId, requestOptions));
    }

    private async __deleteUserByUserId(
        userId: string,
        requestOptions?: User.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.DeleteUserResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                `user/${encodeURIComponent(userId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.DeleteUserResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling DELETE /user/{user_id}.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Sets authentication data for a specific integration for a user.
     *
     * Accepts either API key authentication or general authentication data.
     * This updates the auth_metadata for the specified user's integration instance.
     *
     * @param {Klavis.SetUserAuthRequest} request
     * @param {User.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.user.setUserAuth({
     *         userId: "userId",
     *         serverName: "Affinity",
     *         authData: {}
     *     })
     */
    public setUserAuth(
        request: Klavis.SetUserAuthRequest,
        requestOptions?: User.RequestOptions,
    ): core.HttpResponsePromise<Klavis.StatusResponse> {
        return core.HttpResponsePromise.fromPromise(this.__setUserAuth(request, requestOptions));
    }

    private async __setUserAuth(
        request: Klavis.SetUserAuthRequest,
        requestOptions?: User.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.StatusResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                "user/set-auth",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.StatusResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling POST /user/set-auth.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves authentication data for a specific integration for a user.
     *
     * Returns the authentication data if available, along with authentication status.
     * Includes token refresh handling if needed.
     *
     * @param {string} userId - The identifier for the user
     * @param {string} serverName - The name of the MCP server (e.g., 'GitHub', 'Jira')
     * @param {User.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.user.getUserAuth("user_id", "server_name")
     */
    public getUserAuth(
        userId: string,
        serverName: string,
        requestOptions?: User.RequestOptions,
    ): core.HttpResponsePromise<Klavis.GetUserAuthResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getUserAuth(userId, serverName, requestOptions));
    }

    private async __getUserAuth(
        userId: string,
        serverName: string,
        requestOptions?: User.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.GetUserAuthResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                `user/${encodeURIComponent(userId)}/auth/${encodeURIComponent(serverName)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.GetUserAuthResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError(
                    "Timeout exceeded when calling GET /user/{user_id}/auth/{server_name}.",
                );
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes authentication data for a specific integration for a user.
     *
     * This will clear the stored authentication credentials, effectively unauthenticating the integration.
     *
     * @param {string} userId - The unique identifier for the user
     * @param {string} serverName - The name of the MCP server to delete authentication for (e.g., 'github', 'jira')
     * @param {User.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.user.deleteUserAuth("user_id", "server_name")
     */
    public deleteUserAuth(
        userId: string,
        serverName: string,
        requestOptions?: User.RequestOptions,
    ): core.HttpResponsePromise<Klavis.StatusResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteUserAuth(userId, serverName, requestOptions));
    }

    private async __deleteUserAuth(
        userId: string,
        serverName: string,
        requestOptions?: User.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.StatusResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                `user/user/${encodeURIComponent(userId)}/server/${encodeURIComponent(serverName)}/auth`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.StatusResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError(
                    "Timeout exceeded when calling DELETE /user/user/{user_id}/server/{server_name}/auth.",
                );
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.apiKey);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
