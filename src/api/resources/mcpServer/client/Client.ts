/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Klavis from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";
import { toJson } from "../../../../core/json.js";

export declare namespace McpServer {
    export interface Options {
        environment?: core.Supplier<environments.KlavisEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class McpServer {
    protected readonly _options: McpServer.Options;

    constructor(_options: McpServer.Options = {}) {
        this._options = _options;
    }

    /**
     * Calls a tool on a specific remote MCP server, used for function calling. Eliminates the need for manual MCP code implementation.
     * Under the hood, Klavis will instantiates an MCP client and establishes a connection with the remote MCP server to call the tool.
     *
     * @param {Klavis.CallToolRequest} request
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.callTools({
     *         serverUrl: "serverUrl",
     *         toolName: "toolName"
     *     })
     */
    public callTools(
        request: Klavis.CallToolRequest,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.CallToolResponse> {
        return core.HttpResponsePromise.fromPromise(this.__callTools(request, requestOptions));
    }

    private async __callTools(
        request: Klavis.CallToolRequest,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.CallToolResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                "mcp-server/call-tool",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.CallToolResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling POST /mcp-server/call-tool.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Lists all tools available for a specific remote MCP server in various AI model formats.
     *
     * This eliminates the need for manual MCP code implementation and format conversion.
     * Under the hood, Klavis instantiates an MCP client and establishes a connection
     * with the remote MCP server to retrieve available tools.
     *
     * @param {Klavis.ListToolsRequest} request
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.listTools({
     *         serverUrl: "serverUrl"
     *     })
     */
    public listTools(
        request: Klavis.ListToolsRequest,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.ListToolsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listTools(request, requestOptions));
    }

    private async __listTools(
        request: Klavis.ListToolsRequest,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.ListToolsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                "mcp-server/list-tools",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.ListToolsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling POST /mcp-server/list-tools.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a Strata MCP server.
     *
     * Parameters:
     * - servers: Can be 'ALL' to add all available Klavis integration, a list of specific server names, or null to add no servers
     * - externalServers: Optional list of external MCP servers to validate and add
     *
     * @param {Klavis.StrataCreateRequest} request
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.createStrataServer({
     *         userId: "userId"
     *     })
     */
    public createStrataServer(
        request: Klavis.StrataCreateRequest,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.StrataCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createStrataServer(request, requestOptions));
    }

    private async __createStrataServer(
        request: Klavis.StrataCreateRequest,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.StrataCreateResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                "mcp-server/strata/create",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.StrataCreateResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling POST /mcp-server/strata/create.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Add servers to an existing Strata MCP server.
     *
     * Note: After adding servers, you need to reconnect the MCP server so that list_tool can be updated with the new servers.
     *
     * Parameters:
     * - servers: Can be 'ALL' to add all available servers, a list of specific server names, or null to add no servers
     * - externalServers: Optional list of external MCP servers to validate and add
     *
     * @param {Klavis.StrataAddServersRequest} request
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.addServersToStrata({
     *         strataId: "strataId"
     *     })
     */
    public addServersToStrata(
        request: Klavis.StrataAddServersRequest,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.StrataAddServersResponse> {
        return core.HttpResponsePromise.fromPromise(this.__addServersToStrata(request, requestOptions));
    }

    private async __addServersToStrata(
        request: Klavis.StrataAddServersRequest,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.StrataAddServersResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                "mcp-server/strata/add",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.StrataAddServersResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling POST /mcp-server/strata/add.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete servers from an existing Strata MCP server.
     *
     * Note: After deleting servers, you need to reconnect the MCP server so that list_tool can be updated to reflect the removed servers.
     *
     * Parameters:
     * - strataId: The strata server ID (path parameter)
     * - servers: Can be 'ALL' to delete all available Klavis integration, a list of specific server names, or null to delete no servers
     * - externalServers: Query parameter - comma-separated list of external server names to delete
     *
     * Returns separate lists for deleted Klavis servers and deleted external servers.
     *
     * @param {string} strataId
     * @param {Klavis.DeleteServersFromStrataMcpServerStrataStrataIdServersDeleteRequest} request
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.deleteServersFromStrata("strataId")
     */
    public deleteServersFromStrata(
        strataId: string,
        request: Klavis.DeleteServersFromStrataMcpServerStrataStrataIdServersDeleteRequest = {},
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.StrataDeleteServersResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteServersFromStrata(strataId, request, requestOptions));
    }

    private async __deleteServersFromStrata(
        strataId: string,
        request: Klavis.DeleteServersFromStrataMcpServerStrataStrataIdServersDeleteRequest = {},
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.StrataDeleteServersResponse>> {
        const { servers, externalServers } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (servers != null) {
            if (Array.isArray(servers)) {
                _queryParams["servers"] = servers.map((item) => (typeof item === "string" ? item : toJson(item)));
            } else {
                _queryParams["servers"] = typeof servers === "string" ? servers : toJson(servers);
            }
        }

        if (externalServers != null) {
            _queryParams["externalServers"] = externalServers;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                `mcp-server/strata/${encodeURIComponent(strataId)}/servers`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.StrataDeleteServersResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError(
                    "Timeout exceeded when calling DELETE /mcp-server/strata/{strataId}/servers.",
                );
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get information about an existing Strata MCP server instance.
     *
     * Returns the strata URL, connected klavis servers, connected external servers (with URLs),
     * and authentication URLs for klavis servers.
     *
     * @param {string} strataId
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.getStrataServer("strataId")
     */
    public getStrataServer(
        strataId: string,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.StrataGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getStrataServer(strataId, requestOptions));
    }

    private async __getStrataServer(
        strataId: string,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.StrataGetResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                `mcp-server/strata/${encodeURIComponent(strataId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.StrataGetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling GET /mcp-server/strata/{strataId}.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves authentication data for a specific integration within a Strata MCP server.
     *
     * Returns the authentication data if available, along with authentication status.
     *
     * @param {string} strataId - The strata server ID
     * @param {Klavis.McpServerName} serverName - The name of the Klavis MCP server to get authentication for (e.g., 'GitHub', 'Jira')
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.getStrataAuth("strataId", "Affinity")
     */
    public getStrataAuth(
        strataId: string,
        serverName: Klavis.McpServerName,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.StrataGetAuthResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getStrataAuth(strataId, serverName, requestOptions));
    }

    private async __getStrataAuth(
        strataId: string,
        serverName: Klavis.McpServerName,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.StrataGetAuthResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                `mcp-server/strata/${encodeURIComponent(strataId)}/auth/${encodeURIComponent(serverName)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.StrataGetAuthResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError(
                    "Timeout exceeded when calling GET /mcp-server/strata/{strataId}/auth/{serverName}.",
                );
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes authentication data for a specific integration within a Strata MCP server.
     *
     * This will clear the stored authentication credentials, effectively unauthenticating the server.
     *
     * @param {string} strataId - The strata server ID
     * @param {Klavis.McpServerName} serverName - The name of the Klavis MCP server to delete authentication for (e.g., 'github', 'jira')
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.deleteStrataAuth("strataId", "Affinity")
     */
    public deleteStrataAuth(
        strataId: string,
        serverName: Klavis.McpServerName,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.StatusResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteStrataAuth(strataId, serverName, requestOptions));
    }

    private async __deleteStrataAuth(
        strataId: string,
        serverName: Klavis.McpServerName,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.StatusResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                `mcp-server/strata/${encodeURIComponent(strataId)}/auth/${encodeURIComponent(serverName)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.StatusResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError(
                    "Timeout exceeded when calling DELETE /mcp-server/strata/{strataId}/auth/{serverName}.",
                );
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Sets authentication data for a specific integration within a Strata MCP server.
     *
     * Accepts either API key authentication or general authentication data.
     *
     * @param {Klavis.StrataSetAuthRequest} request
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.setStrataAuth({
     *         strataId: "strataId",
     *         serverName: "Affinity",
     *         authData: {}
     *     })
     */
    public setStrataAuth(
        request: Klavis.StrataSetAuthRequest,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.StatusResponse> {
        return core.HttpResponsePromise.fromPromise(this.__setStrataAuth(request, requestOptions));
    }

    private async __setStrataAuth(
        request: Klavis.StrataSetAuthRequest,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.StatusResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                "mcp-server/strata/set-auth",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.StatusResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling POST /mcp-server/strata/set-auth.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a URL for a specified MCP server,
     * validating the request with an API key and user details.
     * Returns the existing server URL if it already exists for the user.
     * If OAuth is configured for the server, also returns the base OAuth authorization URL.
     *
     * @param {Klavis.CreateServerRequest} request
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.createServerInstance({
     *         serverName: "Affinity",
     *         userId: "userId"
     *     })
     */
    public createServerInstance(
        request: Klavis.CreateServerRequest,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.CreateServerResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createServerInstance(request, requestOptions));
    }

    private async __createServerInstance(
        request: Klavis.CreateServerRequest,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.CreateServerResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                "mcp-server/instance/create",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.CreateServerResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling POST /mcp-server/instance/create.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates an instance id for a self-hosted MCP server,
     * validating the request with an API key and user details.
     * The main purpose of this endpoint is to create an instance id for a self-hosted MCP server.
     * The instance id is used to identify and store the auth metadata in the database.
     * Returns the existing instance id if it already exists for the user.
     *
     * @param {Klavis.CreateSelfHostedServerRequest} request
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.createSelfHostedServerInstance({
     *         serverName: "Affinity",
     *         userId: "userId"
     *     })
     */
    public createSelfHostedServerInstance(
        request: Klavis.CreateSelfHostedServerRequest,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.CreateSelfHostedServerResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createSelfHostedServerInstance(request, requestOptions));
    }

    private async __createSelfHostedServerInstance(
        request: Klavis.CreateSelfHostedServerRequest,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.CreateSelfHostedServerResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                "mcp-server/self-hosted/instance/create",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Klavis.CreateSelfHostedServerResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError(
                    "Timeout exceeded when calling POST /mcp-server/self-hosted/instance/create.",
                );
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Checks the details of a specific server connection instance using its unique ID and API key,
     * returning server details like authentication status and associated server/platform info.
     *
     * @param {string} instanceId - The ID of the connection integration instance whose status is being checked. This is returned by the Create API.
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.getServerInstance("instanceId")
     */
    public getServerInstance(
        instanceId: string,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.GetInstanceResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getServerInstance(instanceId, requestOptions));
    }

    private async __getServerInstance(
        instanceId: string,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.GetInstanceResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                `mcp-server/instance/${encodeURIComponent(instanceId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.GetInstanceResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError(
                    "Timeout exceeded when calling GET /mcp-server/instance/{instanceId}.",
                );
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Completely removes a server connection instance using its unique ID,
     * deleting all associated data from the system.
     *
     * @param {string} instanceId - The ID of the connection instance to delete.
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.deleteServerInstance("instanceId")
     */
    public deleteServerInstance(
        instanceId: string,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.StatusResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteServerInstance(instanceId, requestOptions));
    }

    private async __deleteServerInstance(
        instanceId: string,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.StatusResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                `mcp-server/instance/${encodeURIComponent(instanceId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.StatusResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError(
                    "Timeout exceeded when calling DELETE /mcp-server/instance/{instanceId}.",
                );
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves the auth data for a specific integration instance that the API key owner controls.
     * Includes access token, refresh token, and other authentication data.
     *
     * This endpoint includes proper ownership verification to ensure users can only access
     * authentication data for integration instances they own. It also handles token refresh if needed.
     *
     * @param {string} instanceId - The ID of the connection integration instance to get auth data for.
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.getInstanceAuthData("instanceId")
     */
    public getInstanceAuthData(
        instanceId: string,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.GetAuthDataResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getInstanceAuthData(instanceId, requestOptions));
    }

    private async __getInstanceAuthData(
        instanceId: string,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.GetAuthDataResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                `mcp-server/instance/${encodeURIComponent(instanceId)}/auth`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.GetAuthDataResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError(
                    "Timeout exceeded when calling GET /mcp-server/instance/{instanceId}/auth.",
                );
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes authentication data for a specific server connection instance.
     *
     * @param {string} instanceId - The ID of the connection instance to delete auth for.
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.deleteInstanceAuth("instanceId")
     */
    public deleteInstanceAuth(
        instanceId: string,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.StatusResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteInstanceAuth(instanceId, requestOptions));
    }

    private async __deleteInstanceAuth(
        instanceId: string,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.StatusResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                `mcp-server/instance/${encodeURIComponent(instanceId)}/auth`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.StatusResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError(
                    "Timeout exceeded when calling DELETE /mcp-server/instance/{instanceId}/auth.",
                );
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get tools information for any MCP server.
     *
     * @param {Klavis.McpServerName} serverName - The name of the target MCP server. Case-insensitive (e.g., 'google calendar', 'GOOGLE_CALENDAR', 'Google Calendar' are all valid).
     * @param {Klavis.McpServerGetToolsRequest} request
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.getTools("Affinity")
     */
    public getTools(
        serverName: Klavis.McpServerName,
        request: Klavis.McpServerGetToolsRequest = {},
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.ListToolsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getTools(serverName, request, requestOptions));
    }

    private async __getTools(
        serverName: Klavis.McpServerName,
        request: Klavis.McpServerGetToolsRequest = {},
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.ListToolsResponse>> {
        const { format, legacy } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (format != null) {
            _queryParams["format"] = format;
        }

        if (legacy != null) {
            _queryParams["legacy"] = legacy.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                `mcp-server/tools/${encodeURIComponent(serverName)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.ListToolsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError(
                    "Timeout exceeded when calling GET /mcp-server/tools/{serverName}.",
                );
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get all MCP servers with their basic information including id, name, description, and tools.
     *
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.mcpServer.getAllMcpServers()
     */
    public getAllMcpServers(
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.GetMcpServersResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getAllMcpServers(requestOptions));
    }

    private async __getAllMcpServers(
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.GetMcpServersResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                "mcp-server/servers",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.GetMcpServersResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.KlavisError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling GET /mcp-server/servers.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Sets authentication data for a specific integration instance.
     * Accepts either API key authentication or general authentication data.
     * This updates the auth_metadata for the specified integration instance.
     *
     * @param {Klavis.SetAuthRequest} request
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.mcpServer.setInstanceAuth({
     *         instanceId: "instanceId",
     *         authData: {}
     *     })
     */
    public setInstanceAuth(
        request: Klavis.SetAuthRequest,
        requestOptions?: McpServer.RequestOptions,
    ): core.HttpResponsePromise<Klavis.StatusResponse> {
        return core.HttpResponsePromise.fromPromise(this.__setInstanceAuth(request, requestOptions));
    }

    private async __setInstanceAuth(
        request: Klavis.SetAuthRequest,
        requestOptions?: McpServer.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.StatusResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                "mcp-server/instance/set-auth",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.StatusResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError(
                    "Timeout exceeded when calling POST /mcp-server/instance/set-auth.",
                );
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {McpServer.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.mcpServer.getOauthUrl()
     */
    public getOauthUrl(requestOptions?: McpServer.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__getOauthUrl(requestOptions));
    }

    private async __getOauthUrl(requestOptions?: McpServer.RequestOptions): Promise<core.WithRawResponse<void>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                "mcp-server/oauth-url",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.KlavisError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling POST /mcp-server/oauth-url.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.apiKey);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
