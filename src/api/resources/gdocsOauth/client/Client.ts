/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Klavis from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace GdocsOauth {
    export interface Options {
        environment?: core.Supplier<environments.KlavisEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class GdocsOauth {
    protected readonly _options: GdocsOauth.Options;

    constructor(_options: GdocsOauth.Options = {}) {
        this._options = _options;
    }

    /**
     * Start Google Docs OAuth flow
     *
     * Parameters:
     * - instance_id: Identifier for the instance requesting authorization
     * - client_id: Optional client ID for white labeling
     * - scope: Optional scopes to request (comma-separated)
     * - redirect_url: Optional URL to redirect to after authorization completes
     *
     * @param {Klavis.AuthorizeGDocsRequest} request
     * @param {GdocsOauth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.gdocsOauth.authorizeGDocs({
     *         instance_id: "instance_id"
     *     })
     */
    public authorizeGDocs(
        request: Klavis.AuthorizeGDocsRequest,
        requestOptions?: GdocsOauth.RequestOptions,
    ): core.HttpResponsePromise<unknown> {
        return core.HttpResponsePromise.fromPromise(this.__authorizeGDocs(request, requestOptions));
    }

    private async __authorizeGDocs(
        request: Klavis.AuthorizeGDocsRequest,
        requestOptions?: GdocsOauth.RequestOptions,
    ): Promise<core.WithRawResponse<unknown>> {
        const { instance_id: instanceId, client_id: clientId, scope, redirect_url: redirectUrl } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["instance_id"] = instanceId;
        if (clientId != null) {
            _queryParams["client_id"] = clientId;
        }

        if (scope != null) {
            _queryParams["scope"] = scope;
        }

        if (redirectUrl != null) {
            _queryParams["redirect_url"] = redirectUrl;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                "oauth/gdocs/authorize",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling GET /oauth/gdocs/authorize.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Handles the callback from Google Docs OAuth authorization.
     *
     * @param {Klavis.GdocsOAuthCallbackRequest} request
     * @param {GdocsOauth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.BadRequestError}
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.gdocsOauth.gdocsOAuthCallback()
     */
    public gdocsOAuthCallback(
        request: Klavis.GdocsOAuthCallbackRequest = {},
        requestOptions?: GdocsOauth.RequestOptions,
    ): core.HttpResponsePromise<Klavis.GDocsOAuthSuccessResponse> {
        return core.HttpResponsePromise.fromPromise(this.__gdocsOAuthCallback(request, requestOptions));
    }

    private async __gdocsOAuthCallback(
        request: Klavis.GdocsOAuthCallbackRequest = {},
        requestOptions?: GdocsOauth.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.GDocsOAuthSuccessResponse>> {
        const { code, state, error, error_description: errorDescription } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (code != null) {
            _queryParams["code"] = code;
        }

        if (state != null) {
            _queryParams["state"] = state;
        }

        if (error != null) {
            _queryParams["error"] = error;
        }

        if (errorDescription != null) {
            _queryParams["error_description"] = errorDescription;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                "oauth/gdocs/callback",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.GDocsOAuthSuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Klavis.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling GET /oauth/gdocs/callback.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Refresh an expired Google Docs access token using the stored refresh token
     *
     * Parameters:
     * - instance_id: Identifier for the instance requesting token refresh
     *
     * Returns:
     * - Success response if token was refreshed successfully, error response otherwise
     *
     * @param {Klavis.RefreshGdocsTokenOauthGdocsRefreshTokenPostRequest} request
     * @param {GdocsOauth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Klavis.BadRequestError}
     * @throws {@link Klavis.UnprocessableEntityError}
     *
     * @example
     *     await client.gdocsOauth.refreshGdocsToken({
     *         instance_id: "instance_id"
     *     })
     */
    public refreshGdocsToken(
        request: Klavis.RefreshGdocsTokenOauthGdocsRefreshTokenPostRequest,
        requestOptions?: GdocsOauth.RequestOptions,
    ): core.HttpResponsePromise<Klavis.GDocsOAuthSuccessResponse> {
        return core.HttpResponsePromise.fromPromise(this.__refreshGdocsToken(request, requestOptions));
    }

    private async __refreshGdocsToken(
        request: Klavis.RefreshGdocsTokenOauthGdocsRefreshTokenPostRequest,
        requestOptions?: GdocsOauth.RequestOptions,
    ): Promise<core.WithRawResponse<Klavis.GDocsOAuthSuccessResponse>> {
        const { instance_id: instanceId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["instance_id"] = instanceId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.KlavisEnvironment.Default,
                "oauth/gdocs/refresh_token",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Klavis.GDocsOAuthSuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Klavis.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Klavis.UnprocessableEntityError(
                        _response.error.body as Klavis.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.KlavisError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.KlavisError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.KlavisTimeoutError("Timeout exceeded when calling POST /oauth/gdocs/refresh_token.");
            case "unknown":
                throw new errors.KlavisError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.apiKey);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
