/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { KlavisClient } from "../../src/Client";

describe("McpServer", () => {
    test("call_tools", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { serverUrl: "serverUrl", toolName: "toolName" };
        const rawResponseBody = {
            success: true,
            result: { content: [{ key: "value" }], isError: true },
            error: "error",
        };
        server
            .mockEndpoint()
            .post("/mcp-server/call-tool")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.callTools({
            serverUrl: "serverUrl",
            toolName: "toolName",
        });
        expect(response).toEqual({
            success: true,
            result: {
                content: [
                    {
                        key: "value",
                    },
                ],
                isError: true,
            },
            error: "error",
        });
    });

    test("list_tools", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { serverUrl: "serverUrl" };
        const rawResponseBody = { success: true, tools: [{ key: "value" }], format: "openai", error: "error" };
        server
            .mockEndpoint()
            .post("/mcp-server/list-tools")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.listTools({
            serverUrl: "serverUrl",
        });
        expect(response).toEqual({
            success: true,
            tools: [
                {
                    key: "value",
                },
            ],
            format: "openai",
            error: "error",
        });
    });

    test("createStrataServer", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { userId: "userId" };
        const rawResponseBody = {
            strataServerUrl: "strataServerUrl",
            strataId: "strataId",
            addedServers: ["addedServers"],
            addedExternalServers: [{ name: "name", url: "url" }],
            oauthUrls: { key: "value" },
            apiKeyUrls: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/mcp-server/strata/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.createStrataServer({
            userId: "userId",
        });
        expect(response).toEqual({
            strataServerUrl: "strataServerUrl",
            strataId: "strataId",
            addedServers: ["addedServers"],
            addedExternalServers: [
                {
                    name: "name",
                    url: "url",
                },
            ],
            oauthUrls: {
                key: "value",
            },
            apiKeyUrls: {
                key: "value",
            },
        });
    });

    test("addServersToStrata", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { strataId: "strataId" };
        const rawResponseBody = {
            addedServers: ["addedServers"],
            addedExternalServers: [{ name: "name", url: "url" }],
            oauthUrls: { key: "value" },
            apiKeyUrls: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/mcp-server/strata/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.addServersToStrata({
            strataId: "strataId",
        });
        expect(response).toEqual({
            addedServers: ["addedServers"],
            addedExternalServers: [
                {
                    name: "name",
                    url: "url",
                },
            ],
            oauthUrls: {
                key: "value",
            },
            apiKeyUrls: {
                key: "value",
            },
        });
    });

    test("deleteServersFromStrata", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            deletedServers: ["deletedServers"],
            deletedExternalServers: ["deletedExternalServers"],
        };
        server
            .mockEndpoint()
            .delete("/mcp-server/strata/strataId/servers")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.deleteServersFromStrata("strataId");
        expect(response).toEqual({
            deletedServers: ["deletedServers"],
            deletedExternalServers: ["deletedExternalServers"],
        });
    });

    test("getStrataServer", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            strataServerUrl: "strataServerUrl",
            strataId: "strataId",
            connectedServers: ["connectedServers"],
            connectedExternalServers: [{ name: "name", url: "url" }],
            oauthUrls: { key: "value" },
            apiKeyUrls: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/mcp-server/strata/strataId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.getStrataServer("strataId");
        expect(response).toEqual({
            strataServerUrl: "strataServerUrl",
            strataId: "strataId",
            connectedServers: ["connectedServers"],
            connectedExternalServers: [
                {
                    name: "name",
                    url: "url",
                },
            ],
            oauthUrls: {
                key: "value",
            },
            apiKeyUrls: {
                key: "value",
            },
        });
    });

    test("getStrataAuth", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            serverName: "serverName",
            authData: { key: "value" },
            isAuthenticated: true,
            message: "message",
        };
        server
            .mockEndpoint()
            .get("/mcp-server/strata/strataId/auth/Affinity")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.getStrataAuth("strataId", "Affinity");
        expect(response).toEqual({
            success: true,
            serverName: "serverName",
            authData: {
                key: "value",
            },
            isAuthenticated: true,
            message: "message",
        });
    });

    test("deleteStrataAuth", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, message: "message" };
        server
            .mockEndpoint()
            .delete("/mcp-server/strata/strataId/auth/Affinity")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.deleteStrataAuth("strataId", "Affinity");
        expect(response).toEqual({
            success: true,
            message: "message",
        });
    });

    test("setStrataAuth", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { strataId: "strataId", serverName: "Affinity", authData: {} };
        const rawResponseBody = { success: true, message: "message" };
        server
            .mockEndpoint()
            .post("/mcp-server/strata/set-auth")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.setStrataAuth({
            strataId: "strataId",
            serverName: "Affinity",
            authData: {},
        });
        expect(response).toEqual({
            success: true,
            message: "message",
        });
    });

    test("createServerInstance", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { serverName: "Affinity", userId: "userId" };
        const rawResponseBody = { serverUrl: "serverUrl", instanceId: "instanceId", oauthUrl: "oauthUrl" };
        server
            .mockEndpoint()
            .post("/mcp-server/instance/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.createServerInstance({
            serverName: "Affinity",
            userId: "userId",
        });
        expect(response).toEqual({
            serverUrl: "serverUrl",
            instanceId: "instanceId",
            oauthUrl: "oauthUrl",
        });
    });

    test("createSelfHostedServerInstance", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { serverName: "Affinity", userId: "userId" };
        const rawResponseBody = { instanceId: "instanceId", oauthUrl: "oauthUrl" };
        server
            .mockEndpoint()
            .post("/mcp-server/self-hosted/instance/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.createSelfHostedServerInstance({
            serverName: "Affinity",
            userId: "userId",
        });
        expect(response).toEqual({
            instanceId: "instanceId",
            oauthUrl: "oauthUrl",
        });
    });

    test("getServerInstance", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            instanceId: "instanceId",
            authNeeded: true,
            isAuthenticated: true,
            serverName: "serverName",
            platform: "platform",
            externalUserId: "externalUserId",
            oauthUrl: "oauthUrl",
        };
        server
            .mockEndpoint()
            .get("/mcp-server/instance/instanceId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.getServerInstance("instanceId");
        expect(response).toEqual({
            instanceId: "instanceId",
            authNeeded: true,
            isAuthenticated: true,
            serverName: "serverName",
            platform: "platform",
            externalUserId: "externalUserId",
            oauthUrl: "oauthUrl",
        });
    });

    test("deleteServerInstance", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, message: "message" };
        server
            .mockEndpoint()
            .delete("/mcp-server/instance/instanceId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.deleteServerInstance("instanceId");
        expect(response).toEqual({
            success: true,
            message: "message",
        });
    });

    test("getInstanceAuthData", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, authData: { key: "value" }, error: "error" };
        server
            .mockEndpoint()
            .get("/mcp-server/instance/instanceId/auth")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.getInstanceAuthData("instanceId");
        expect(response).toEqual({
            success: true,
            authData: {
                key: "value",
            },
            error: "error",
        });
    });

    test("deleteInstanceAuth", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, message: "message" };
        server
            .mockEndpoint()
            .delete("/mcp-server/instance/instanceId/auth")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.deleteInstanceAuth("instanceId");
        expect(response).toEqual({
            success: true,
            message: "message",
        });
    });

    test("getServerTools", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, tools: [{ key: "value" }], format: "openai", error: "error" };
        server
            .mockEndpoint()
            .get("/mcp-server/tools/serverName")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.getServerTools("serverName");
        expect(response).toEqual({
            success: true,
            tools: [
                {
                    key: "value",
                },
            ],
            format: "openai",
            error: "error",
        });
    });

    test("getAllMcpServers", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            servers: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    tools: [{ name: "name", description: "description" }],
                    authNeeded: true,
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/mcp-server/servers")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.getAllMcpServers();
        expect(response).toEqual({
            servers: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    tools: [
                        {
                            name: "name",
                            description: "description",
                        },
                    ],
                    authNeeded: true,
                },
            ],
        });
    });

    test("setInstanceAuth", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { instanceId: "instanceId", authData: {} };
        const rawResponseBody = { success: true, message: "message" };
        server
            .mockEndpoint()
            .post("/mcp-server/instance/set-auth")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mcpServer.setInstanceAuth({
            instanceId: "instanceId",
            authData: {},
        });
        expect(response).toEqual({
            success: true,
            message: "message",
        });
    });

    test("get_tools", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().get("/mcp-server/tools/server_name").respondWith().statusCode(200).build();

        const response = await client.mcpServer.getTools("server_name");
        expect(response).toEqual(undefined);
    });

    test("get_oauth_url", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().post("/mcp-server/oauth-url").respondWith().statusCode(200).build();

        const response = await client.mcpServer.getOauthUrl();
        expect(response).toEqual(undefined);
    });
});
