/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { KlavisClient } from "../../src/Client";

describe("User", () => {
    test("getUserIntegrations", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { integrations: ["Affinity"] };
        server
            .mockEndpoint()
            .get("/user/userId/integrations")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.getUserIntegrations("userId");
        expect(response).toEqual({
            integrations: ["Affinity"],
        });
    });

    test("getUserByUserId", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { userId: "userId", createdAt: "createdAt", lastUsedAt: "lastUsedAt" };
        server.mockEndpoint().get("/user/userId").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.user.getUserByUserId("userId");
        expect(response).toEqual({
            userId: "userId",
            createdAt: "createdAt",
            lastUsedAt: "lastUsedAt",
        });
    });

    test("deleteUserByUserId", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, message: "message" };
        server.mockEndpoint().delete("/user/userId").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.user.deleteUserByUserId("userId");
        expect(response).toEqual({
            success: true,
            message: "message",
        });
    });

    test("setUserAuth", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { userId: "userId", serverName: "Affinity", authData: {} };
        const rawResponseBody = { success: true, message: "message" };
        server
            .mockEndpoint()
            .post("/user/set-auth")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.setUserAuth({
            userId: "userId",
            serverName: "Affinity",
            authData: {},
        });
        expect(response).toEqual({
            success: true,
            message: "message",
        });
    });

    test("getUserAuth", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            userId: "userId",
            serverName: "serverName",
            authData: { key: "value" },
            isAuthenticated: true,
            message: "message",
        };
        server
            .mockEndpoint()
            .get("/user/userId/auth/Affinity")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.getUserAuth("userId", "Affinity");
        expect(response).toEqual({
            success: true,
            userId: "userId",
            serverName: "serverName",
            authData: {
                key: "value",
            },
            isAuthenticated: true,
            message: "message",
        });
    });

    test("deleteUserAuth", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, message: "message" };
        server
            .mockEndpoint()
            .delete("/user/userId/auth/Affinity")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.deleteUserAuth("userId", "Affinity");
        expect(response).toEqual({
            success: true,
            message: "message",
        });
    });
});
