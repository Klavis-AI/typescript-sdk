/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { KlavisClient } from "../../src/Client";

describe("LinearOauth", () => {
    test("authorizeLinear", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/linear/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.linearOauth.authorizeLinear({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("linearOAuthCallback", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { status: "status", message: "message", data: { key: "value" } };
        server
            .mockEndpoint()
            .get("/oauth/linear/callback")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.linearOauth.linearOAuthCallback();
        expect(response).toEqual({
            status: "status",
            message: "message",
            data: {
                key: "value",
            },
        });
    });
});
