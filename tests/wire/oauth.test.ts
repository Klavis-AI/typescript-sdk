/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { KlavisClient } from "../../src/Client";

describe("Oauth", () => {
    test("authorize_slack", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/slack/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeSlack({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_github", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/github/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeGithub({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_gitlab", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/gitlab/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeGitlab({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_supabase", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/supabase/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeSupabase({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_notion", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/notion/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeNotion({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_jira", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/jira/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeJira({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_confluence", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/confluence/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeConfluence({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_wordpress", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/wordpress/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeWordpress({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_gmail", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/gmail/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeGmail({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_gdrive", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/gdrive/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeGdrive({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_gcalendar", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/gcalendar/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeGcalendar({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_gsheets", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/gsheets/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeGsheets({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_gdocs", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/gdocs/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeGdocs({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_attio", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/attio/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeAttio({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_salesforce", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/salesforce/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeSalesforce({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_asana", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/asana/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeAsana({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_linear", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/linear/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeLinear({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_close", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/close/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeClose({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_clickup", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/clickup/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeClickup({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_airtable", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/airtable/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeAirtable({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_hubspot", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/hubspot/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeHubspot({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_linkedin", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/linkedin/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeLinkedin({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_canva", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/canva/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeCanva({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_xero", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/xero/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeXero({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_dropbox", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/dropbox/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeDropbox({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_box", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/box/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeBox({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_quickbooks", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/quickbooks/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeQuickbooks({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_zendesk", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/zendesk/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeZendesk({
            instance_id: "instance_id",
            subdomain: "subdomain",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_stripe", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/stripe/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeStripe({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_calcom", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/calcom/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeCalcom({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_vercel", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/vercel/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeVercel({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_pipedrive", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/pipedrive/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizePipedrive({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_figma", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/figma/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeFigma({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_klaviyo", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/klaviyo/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeKlaviyo({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_pagerduty", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/pagerduty/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizePagerduty({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_docusign", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/docusign/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeDocusign({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_dialpad", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/dialpad/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeDialpad({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_shopify", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/shopify/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeShopify({
            instance_id: "instance_id",
            shop: "shop",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_onedrive", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/onedrive/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeOnedrive({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("authorize_outlook", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/outlook/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.oauth.authorizeOutlook({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });
});
