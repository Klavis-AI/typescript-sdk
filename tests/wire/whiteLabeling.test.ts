/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { KlavisClient } from "../../src/Client";

describe("WhiteLabeling", () => {
    test("createWhiteLabeling", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { client_id: "client_id", client_secret: "client_secret", server_name: "Slack" };
        const rawResponseBody = { success: true, data: { key: "value" }, message: "message" };
        server
            .mockEndpoint()
            .post("/white-labeling/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.whiteLabeling.createWhiteLabeling({
            client_id: "client_id",
            client_secret: "client_secret",
            server_name: "Slack",
        });
        expect(response).toEqual({
            success: true,
            data: {
                key: "value",
            },
            message: "message",
        });
    });

    test("getWhiteLabelingByClientId", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, data: { key: "value" }, message: "message" };
        server
            .mockEndpoint()
            .get("/white-labeling/get/client_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.whiteLabeling.getWhiteLabelingByClientId("client_id");
        expect(response).toEqual({
            success: true,
            data: {
                key: "value",
            },
            message: "message",
        });
    });
});
