/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { KlavisClient } from "../../src/Client";

describe("CloseOauth", () => {
    test("authorizeClose", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/oauth/close/authorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.closeOauth.authorizeClose({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("closeOAuthCallback", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { status: "status", message: "message" };
        server
            .mockEndpoint()
            .get("/oauth/close/callback")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.closeOauth.closeOAuthCallback();
        expect(response).toEqual({
            status: "status",
            message: "message",
        });
    });

    test("refreshCloseToken", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { status: "status", message: "message" };
        server
            .mockEndpoint()
            .post("/oauth/close/refresh_token")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.closeOauth.refreshCloseToken({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            status: "status",
            message: "message",
        });
    });

    test("revokeCloseToken", async () => {
        const server = mockServerPool.createServer();
        const client = new KlavisClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { status: "status", message: "message" };
        server
            .mockEndpoint()
            .post("/oauth/close/revoke")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.closeOauth.revokeCloseToken({
            instance_id: "instance_id",
        });
        expect(response).toEqual({
            status: "status",
            message: "message",
        });
    });
});
